<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Overleaf 同步 Dropbox &amp; Git &amp; Github</title>
    <url>/2024/12/08/%E7%A7%91%E7%A0%94%E6%96%B9%E6%B3%95/Overleaf%20%E5%90%8C%E6%AD%A5%20Dropbox%20&amp;%20Git%20&amp;%20Github/</url>
    <content><![CDATA[<p>Overleaf的pro版本可以设置同步，三种同步方式来保障数据安全。</p>
<p><img src="https://image.zhaohaoying.cn/hexo/20241208213859.png" alt="image.png"></p>
<h2 id="Dropbox"><a href="#Dropbox" class="headerlink" title="Dropbox"></a>Dropbox</h2><p>1、注册</p>
<p>2、绑定账号</p>
<p>3、同步<br><img src="https://image.zhaohaoying.cn/hexo/20241208214009.png" alt="image.png"></p>
<p>4、设置本地离线访问<br><img src="https://image.zhaohaoying.cn/hexo/20241208215422.png" alt="image.png"></p>
<h2 id="Git"><a href="#Git" class="headerlink" title="Git"></a>Git</h2><p>1、本地新建文件夹，命名为方便自己识别的名字。</p>
<p>2、git clone 命令，在本地建立master分支，与overleaf远程仓库建立了远程连接。需要通过token验证，mac只需要第一次输入token。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ git clone git clone https://git@git.overleaf.com/675xxxx .</span><br></pre></td></tr></table></figure>

<p><img src="https://image.zhaohaoying.cn/hexo/20241208214744.png" alt="image.png"></p>
<p>3、内容修改后，在该文件夹下，git pull</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ git pull</span><br></pre></td></tr></table></figure>


<h2 id="Github"><a href="#Github" class="headerlink" title="Github"></a>Github</h2><p>1、绑定Github账号</p>
<p>2、在Overleaf上Push到Github上自己的私有仓库</p>
<p><img src="https://image.zhaohaoying.cn/hexo/20241208215656.png" alt="image.png"></p>
]]></content>
      <categories>
        <category>科研方法</category>
      </categories>
      <tags>
        <tag>科研方法</tag>
        <tag>科研工具</tag>
        <tag>数据安全</tag>
      </tags>
  </entry>
  <entry>
    <title>Floyd算法</title>
    <url>/2024/12/02/%E7%AE%97%E6%B3%95%E6%A8%A1%E6%9D%BF/Floyd%E7%AE%97%E6%B3%95/</url>
    <content><![CDATA[<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">初始化：</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i ++ )</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= n; j ++ )</span><br><span class="line">            <span class="keyword">if</span> (i == j) d[i][j] = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">else</span> d[i][j] = INF;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 算法结束后，d[a][b]表示a到b的最短距离</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">floyd</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> k = <span class="number">1</span>; k &lt;= n; k ++ )</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i ++ )</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= n; j ++ )</span><br><span class="line">                d[i][j] = <span class="built_in">min</span>(d[i][j], d[i][k] + d[k][j]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>算法刷题</tag>
        <tag>算法模板</tag>
      </tags>
  </entry>
  <entry>
    <title>GAMES003</title>
    <url>/2024/12/03/%E7%A7%91%E7%A0%94%E6%96%B9%E6%B3%95/GAMES003%20%E5%9B%BE%E5%BD%A2%E8%A7%86%E8%A7%89%E7%A7%91%E7%A0%94%E5%9F%BA%E6%9C%AC%E7%B4%A0%E5%85%BB/</url>
    <content><![CDATA[<h1 id="GAMES003-图形视觉科研基本素养"><a href="#GAMES003-图形视觉科研基本素养" class="headerlink" title="GAMES003: 图形视觉科研基本素养"></a>GAMES003: 图形视觉科研基本素养</h1><p><a href="https://pengsida.net/games003/">https://pengsida.net/games003/</a></p>
<p>什么是好的课题：发展空间大、竞争程度小。任务难度与个人能力相匹配。该课题的影响大。</p>
<p>如何设计实验：核⼼原则：减少实验中包含的探索点的数量。</p>
<p>写作规划：1、草图+introduction 2、列出实验 3、做实验写method 4、改</p>
<p>method怎么写：模块的具体设计、模块的motivation、模块的技术优势</p>
<p>五个程度的技术创新：</p>
<ol>
<li>一个崭新的范式（新的学习模型，新的表示） </li>
<li>基于已有pipeline提出非常新颖的模块 </li>
<li>将几个已有的模块组合成新的pipeline </li>
<li>在已有pipeline中加入经过简单改进的模块 </li>
<li>在已有pipeline中加入现有的模块</li>
</ol>
]]></content>
      <categories>
        <category>科研方法</category>
      </categories>
      <tags>
        <tag>科研方法</tag>
        <tag>知识整理</tag>
      </tags>
  </entry>
  <entry>
    <title>KMP算法模板</title>
    <url>/2024/12/02/%E7%AE%97%E6%B3%95%E6%A8%A1%E6%9D%BF/KMP%E7%AE%97%E6%B3%95%E6%A8%A1%E6%9D%BF/</url>
    <content><![CDATA[<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="type">char</span> T[] = <span class="string">&quot;abcdefabc&quot;</span>, P[] = <span class="string">&quot;abc&quot;</span>;  </span><br><span class="line"><span class="type">const</span> <span class="type">int</span> maxn = <span class="number">10000</span>;  </span><br><span class="line"><span class="type">int</span> f[maxn]; <span class="comment">//f[i] 表示字符串 s[0, i-1] 的后缀与前缀的最长公共部分(后缀与前缀均不包含字符串本身)  </span></span><br><span class="line"><span class="comment">//若 f[i] = k 则，字符串 s[0, k-1] 与字符串 s[i-k, i-1] 相同 </span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">getfail</span><span class="params">(<span class="type">char</span>* P, <span class="type">int</span>* f)</span> </span>&#123;</span><br><span class="line">	<span class="type">int</span> m = <span class="built_in">strlen</span>(P);  </span><br><span class="line">	f[<span class="number">0</span>] = <span class="number">0</span>; f[<span class="number">1</span>] = <span class="number">0</span>;  </span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; m; ++i) &#123;</span><br><span class="line">		<span class="type">int</span> j = f[i];  </span><br><span class="line">		<span class="keyword">while</span> (j &amp;&amp; P[j] != P[i])</span><br><span class="line">		    j = f[j];</span><br><span class="line">		f[i + <span class="number">1</span>] = P[j] == P[i] ? j + <span class="number">1</span> : <span class="number">0</span>;</span><br><span class="line">	&#125; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">find</span><span class="params">(<span class="type">char</span>* T, <span class="type">char</span>* P, <span class="type">int</span>* f)</span> </span>&#123; </span><br><span class="line">	<span class="type">int</span> n = <span class="built_in">strlen</span>(T), m = <span class="built_in">strlen</span>(P); </span><br><span class="line">	<span class="comment">//getfail(P, f);  </span></span><br><span class="line">	<span class="type">int</span> j = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">		<span class="keyword">while</span> (j &amp;&amp; P[j] != T[i]) </span><br><span class="line">			j = f[j];</span><br><span class="line">		<span class="keyword">if</span> (P[j] == T[i]) </span><br><span class="line">			++j;</span><br><span class="line">		<span class="keyword">if</span> (j == m)  </span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,i-m<span class="number">+1</span>);<span class="comment">//在串 T 中找到了 P，下标为 i-m+1</span></span><br><span class="line">	&#125; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123; </span><br><span class="line">	<span class="built_in">getfail</span>(P, f);</span><br><span class="line">    <span class="built_in">find</span>(T, P, f);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>




<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// s[]是长文本，p[]是模式串，n是s的长度，m是p的长度</span></span><br><span class="line">求模式串的Next数组：</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">2</span>, j = <span class="number">0</span>; i &lt;= m; i ++ )</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">while</span> (j &amp;&amp; p[i] != p[j + <span class="number">1</span>]) j = ne[j];</span><br><span class="line">    <span class="keyword">if</span> (p[i] == p[j + <span class="number">1</span>]) j ++ ;</span><br><span class="line">    ne[i] = j;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 匹配</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>, j = <span class="number">0</span>; i &lt;= n; i ++ )</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">while</span> (j &amp;&amp; s[i] != p[j + <span class="number">1</span>]) j = ne[j];</span><br><span class="line">    <span class="keyword">if</span> (s[i] == p[j + <span class="number">1</span>]) j ++ ;</span><br><span class="line">    <span class="keyword">if</span> (j == m)</span><br><span class="line">    &#123;</span><br><span class="line">        j = ne[j];</span><br><span class="line">        <span class="comment">// 匹配成功后的逻辑</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>算法刷题</tag>
        <tag>算法模板</tag>
      </tags>
  </entry>
  <entry>
    <title>Kruskal算法</title>
    <url>/2024/12/02/%E7%AE%97%E6%B3%95%E6%A8%A1%E6%9D%BF/Kruskal%E7%AE%97%E6%B3%95/</url>
    <content><![CDATA[<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> n, m;       <span class="comment">// n是点数，m是边数</span></span><br><span class="line"><span class="type">int</span> p[N];       <span class="comment">// 并查集的父节点数组</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Edge</span>     <span class="comment">// 存储边</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> a, b, w;</span><br><span class="line"></span><br><span class="line">    <span class="type">bool</span> <span class="keyword">operator</span>&lt; (<span class="type">const</span> Edge &amp;W)<span class="type">const</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> w &lt; W.w;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;edges[M];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">find</span><span class="params">(<span class="type">int</span> x)</span>     <span class="comment">// 并查集核心操作</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (p[x] != x) p[x] = <span class="built_in">find</span>(p[x]);</span><br><span class="line">    <span class="keyword">return</span> p[x];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">kruskal</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">sort</span>(edges, edges + m);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i ++ ) p[i] = i;    <span class="comment">// 初始化并查集</span></span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> res = <span class="number">0</span>, cnt = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; m; i ++ )</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> a = edges[i].a, b = edges[i].b, w = edges[i].w;</span><br><span class="line"></span><br><span class="line">        a = <span class="built_in">find</span>(a), b = <span class="built_in">find</span>(b);</span><br><span class="line">        <span class="keyword">if</span> (a != b)     <span class="comment">// 如果两个连通块不连通，则将这两个连通块合并</span></span><br><span class="line">        &#123;</span><br><span class="line">            p[a] = b;</span><br><span class="line">            res += w;</span><br><span class="line">            cnt ++ ;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (cnt &lt; n - <span class="number">1</span>) <span class="keyword">return</span> INF;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>算法刷题</tag>
        <tag>算法模板</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode刷题模板</title>
    <url>/2024/12/02/%E7%AE%97%E6%B3%95%E6%A8%A1%E6%9D%BF/LeetCode%E5%88%B7%E9%A2%98%E6%A8%A1%E6%9D%BF/</url>
    <content><![CDATA[<p>XCPC 算法模板：<br><a href="https://github.com/sunkafei/xcpc-algorithm-templates/tree/main">https://github.com/sunkafei/xcpc-algorithm-templates/tree/main</a></p>
<p>kuangbin的ACM模板：<br><a href="https://github.com/bibibibibibi/Template/tree/master">https://github.com/bibibibibibi/Template/tree/master</a></p>
]]></content>
      <tags>
        <tag>算法刷题</tag>
        <tag>知识整理</tag>
      </tags>
  </entry>
  <entry>
    <title>Simple Dijkstra算法模板</title>
    <url>/2024/12/02/%E7%AE%97%E6%B3%95%E6%A8%A1%E6%9D%BF/Simple%20Dijkstra%20%E7%AE%97%E6%B3%95%E6%A8%A1%E6%9D%BF/</url>
    <content><![CDATA[<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="type">int</span> n, m, s; <span class="comment">//点数、边数、起点 </span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> simple_dijkstra &#123; <span class="comment">// O(n^2)</span></span><br><span class="line">	<span class="type">const</span> <span class="type">int</span> maxn = <span class="number">1001</span>;  </span><br><span class="line">	<span class="type">int</span> vis[maxn], d[maxn], w[maxn][maxn]; </span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">dijkstra</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="built_in">memset</span>(vis, <span class="number">0</span>, <span class="built_in">sizeof</span>(vis)); </span><br><span class="line">		<span class="built_in">memset</span>(d, <span class="number">0x3f</span>, <span class="built_in">sizeof</span>(d)); </span><br><span class="line">		d[s] = <span class="number">0</span>;  </span><br><span class="line">		<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">			<span class="type">int</span> x = <span class="number">-1</span>;  </span><br><span class="line">			<span class="keyword">for</span> (<span class="type">int</span> y = <span class="number">1</span>; y &lt;= n; ++y) <span class="keyword">if</span> (!vis[y])</span><br><span class="line">				<span class="keyword">if</span> (x == <span class="number">-1</span> || d[y] &lt; d[x]) </span><br><span class="line">					x = y;</span><br><span class="line">			vis[x] = <span class="literal">true</span>;  </span><br><span class="line">			<span class="keyword">for</span> (<span class="type">int</span> y = <span class="number">1</span>; y &lt;= n; ++y)</span><br><span class="line">				d[y] = <span class="built_in">min</span>(d[y], d[x] + w[x][y]);</span><br><span class="line">		&#125; </span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;  </span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">&quot;%d %d %d&quot;</span>, &amp;n, &amp;m, &amp;s); </span><br><span class="line">		<span class="built_in">memset</span>(w, <span class="number">0x3f</span>, <span class="built_in">sizeof</span>(w)); </span><br><span class="line">		<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; m; ++i) &#123;</span><br><span class="line">			<span class="type">int</span> x, y, z;  </span><br><span class="line">			<span class="built_in">scanf</span>(<span class="string">&quot;%d %d %d&quot;</span>, &amp;x, &amp;y, &amp;z); </span><br><span class="line">			w[x][y] = <span class="built_in">min</span>(w[x][y], z);</span><br><span class="line">		&#125;  </span><br><span class="line">		<span class="built_in">dijkstra</span>();  </span><br><span class="line">		<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, d[i] == <span class="number">0x3f3f3f3f</span> ? INT_MAX : d[i]); </span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">	&#125; </span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>算法刷题</tag>
        <tag>算法模板</tag>
      </tags>
  </entry>
  <entry>
    <title>Spfa 算法（队列优化的Bellman-Ford算法）</title>
    <url>/2024/12/02/%E7%AE%97%E6%B3%95%E6%A8%A1%E6%9D%BF/Spfa%20%E7%AE%97%E6%B3%95%EF%BC%88%E9%98%9F%E5%88%97%E4%BC%98%E5%8C%96%E7%9A%84Bellman-Ford%E7%AE%97%E6%B3%95%EF%BC%89/</url>
    <content><![CDATA[<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> n;      <span class="comment">// 总点数</span></span><br><span class="line"><span class="type">int</span> h[N], w[N], e[N], ne[N], idx;       <span class="comment">// 邻接表存储所有边</span></span><br><span class="line"><span class="type">int</span> dist[N];        <span class="comment">// 存储每个点到1号点的最短距离</span></span><br><span class="line"><span class="type">bool</span> st[N];     <span class="comment">// 存储每个点是否在队列中</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 求1号点到n号点的最短路距离，如果从1号点无法走到n号点则返回-1</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">spfa</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(dist, <span class="number">0x3f</span>, <span class="keyword">sizeof</span> dist);</span><br><span class="line">    dist[<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    queue&lt;<span class="type">int</span>&gt; q;</span><br><span class="line">    q.<span class="built_in">push</span>(<span class="number">1</span>);</span><br><span class="line">    st[<span class="number">1</span>] = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (q.<span class="built_in">size</span>())</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">auto</span> t = q.<span class="built_in">front</span>();</span><br><span class="line">        q.<span class="built_in">pop</span>();</span><br><span class="line"></span><br><span class="line">        st[t] = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = h[t]; i != <span class="number">-1</span>; i = ne[i])</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">int</span> j = e[i];</span><br><span class="line">            <span class="keyword">if</span> (dist[j] &gt; dist[t] + w[i])</span><br><span class="line">            &#123;</span><br><span class="line">                dist[j] = dist[t] + w[i];</span><br><span class="line">                <span class="keyword">if</span> (!st[j])     <span class="comment">// 如果队列中已存在j，则不需要将j重复插入</span></span><br><span class="line">                &#123;</span><br><span class="line">                    q.<span class="built_in">push</span>(j);</span><br><span class="line">                    st[j] = <span class="literal">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (dist[n] == <span class="number">0x3f3f3f3f</span>) <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">return</span> dist[n];</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>算法刷题</tag>
        <tag>算法模板</tag>
      </tags>
  </entry>
  <entry>
    <title>全国青少年信息学奥林匹克系列竞赛大纲</title>
    <url>/2024/12/01/%E7%AE%97%E6%B3%95%E6%A8%A1%E6%9D%BF/%E5%85%A8%E5%9B%BD%E9%9D%92%E5%B0%91%E5%B9%B4%E4%BF%A1%E6%81%AF%E5%AD%A6%E5%A5%A5%E6%9E%97%E5%8C%B9%E5%85%8B%E7%B3%BB%E5%88%97%E7%AB%9E%E8%B5%9B%E5%A4%A7%E7%BA%B2/</url>
    <content><![CDATA[<p>全国青少年信息学奥林匹克竞赛( NOI )<br>2023 年 3 月<br><a href="https://www.baidu.com/link?url=rnvzv6Tp6d2jSNbr1GN7pCjsHduQy_OBo0hj1Mp05duupMYTttxmNQfLTqC-FQu0N6G87IzKg-cRx7FAoXggZNiUV0FpwBegqYvbWevZ5ZD8AYrwiDh-HEgk9cEr0vSY5EFoS4klzwt0aEkRFfBS7_&wd=&eqid=e3df6dfc0013c53100000003674d6079">全国青少年信息学奥林匹克系列竞赛大纲</a></p>
<p>等级化原则：<br>(1) 入门级 CCF非专业级软件能力认证入门组<br>(2) 提高级 全国青少年信息学奥林匹克联赛、CCF非专业级软件能力认证提高组<br>(3) NOI级 全国青少年信息学奥林匹克竞赛</p>
<p>入门级难度 1-5，提高级难度5-8，NOI级难度7-10</p>
<h2 id="一、-入门级"><a href="#一、-入门级" class="headerlink" title="一、 入门级"></a>一、 入门级</h2><table>
<thead>
<tr>
<th>数据结构：</th>
</tr>
</thead>
<tbody><tr>
<td>1、线性结构：<font color=YellowGreen>链表【3】</font>，<font color=YellowGreen>栈【3】</font>，<font color=YellowGreen>队列【3】</font></td>
</tr>
<tr>
<td>2、简单树：树的定义与相关概念【3】，树的表示与存储【4】，二叉树的定义与基本性质【3】，二叉树的表示与存储【4】，二叉树的遍历【4】</td>
</tr>
<tr>
<td>3、特殊树：完全二叉树的定义与基本性质【4】，完全二叉树的数组表示法【4】，哈夫曼树的定义和构造和哈夫曼编码【4】，二叉搜索树的定义和构造【4】</td>
</tr>
<tr>
<td>4、简单图：图的定义与相关概念【3】，图的表示与存储：邻接矩阵【4】，图的表示与存储：邻接表【4】</td>
</tr>
</tbody></table>
<table>
<thead>
<tr>
<th>算法：</th>
</tr>
</thead>
<tbody><tr>
<td>1、算法概念与描述：算法概念【1】，算法描述【2】</td>
</tr>
<tr>
<td>2、入门算法：<font color=YellowGreen> 枚举法【1】</font>，<font color=Red>模拟法【1】</font></td>
</tr>
<tr>
<td>3、基础算法：<font color=Red>贪心法【3】</font>，递推法【3】，递归法【4】，<font color=Red>二分法【4】</font>，倍增法【4】</td>
</tr>
<tr>
<td>4、数值处理算法：高精度加减乘除余数【4】</td>
</tr>
<tr>
<td>5、排序算法：排序的基本概念【3】，<font color=YellowGreen>冒泡排序【3】</font>，<font color=YellowGreen>选择排序【3】</font>，<font color=YellowGreen>插入排序【3】</font>，计数排序【3】</td>
</tr>
<tr>
<td>6、搜索算法：<font color=YellowGreen>深度优先搜索【5】</font>，<font color=YellowGreen>广度优先搜索【5】</font></td>
</tr>
<tr>
<td>7、图论算法：深度优先遍历【4】，广度优先遍历【4】，泛洪算法【5】</td>
</tr>
<tr>
<td>8、动态规划：动态规划的基本思路【4】，<font color=Red>简单一维动态规划【4】</font>，<font color=Red>简单背包类型动态规划【5】</font>，<font color=Red>简单区间类型动态规划【5】</font></td>
</tr>
</tbody></table>
<h2 id="二、提高级"><a href="#二、提高级" class="headerlink" title="二、提高级"></a>二、提高级</h2><table>
<thead>
<tr>
<th>数据结构：</th>
</tr>
</thead>
<tbody><tr>
<td>1、线性结构：双端栈【5】，双端队列【5】，单调队列【5】，优先队列【6】，<font color=Red>ST表【6】</font></td>
</tr>
<tr>
<td>2、集合与森林：<font color=Red>并查集【6】</font>，树的孩子兄弟表示法【6】</td>
</tr>
<tr>
<td>3、特殊树：二叉堆【6】，<font color=Red>树状数组【6】</font>，<font color=Red>线段树【6】</font>，字典树【6】，笛卡尔树【7】，<font color=Red>平衡树【8】</font></td>
</tr>
<tr>
<td>4、常见图：稀疏图【5】，二分图【6】，欧拉图【6】，有向无环图【6】，连通图与强连通图【7】，双连通图【7】</td>
</tr>
<tr>
<td>5、哈希图：数值哈希函数构造【5】，<font color=Red>字符串哈希函数构造【6】</font>，哈希冲突的常用处理方法【6】</td>
</tr>
</tbody></table>
<table>
<thead>
<tr>
<th>算法：</th>
</tr>
</thead>
<tbody><tr>
<td>1、复杂度分析：时间空间复杂度分析【6】</td>
</tr>
<tr>
<td>2、算法策略：离散化【6】</td>
</tr>
<tr>
<td>3、基础算法：分治算法【6】</td>
</tr>
<tr>
<td>4、排序算法：<font color=Red>归并排序【5】</font>，<font color=Red>快速排序【5】</font>，堆排序【6】，桶排序【5】，基数排序【6】</td>
</tr>
<tr>
<td>5、字符串相关算法：<font color=Red>字符串匹配：KMP算法【5】</font></td>
</tr>
<tr>
<td>6、搜索算法：搜索的剪枝优化【6】，<font color=YellowGreen>记忆化搜索【6】</font>，启发式搜索【7】，双向广度优先搜索【7】，迭代加深搜索【7】</td>
</tr>
<tr>
<td>7、图论算法：<font color=Red>最小生成树：Prim和Kruskal等算法【6】</font>，次小生成树【7】，<font color=Red>单源最短路：Bellman-Ford、Dijkstra，SPFA等算法【6】</font>，单源次短路【7】，Floyd-Warshall算法【6】，有向无环图的拓扑排序【6】，欧拉道路和欧拉回路【6】，二分图的判定【6】，强连通分量【7】，割点、割边【7】，树的重心、直径、DFS序与欧拉序【6】，树的差分、子树和与倍增【6】，<font color=Red>最近公共祖先【6】</font></td>
</tr>
<tr>
<td>8、动态规划：<font color=Red>树型动态规划【6】</font>，<font color=Red>状态压缩动态规划【7】</font>，动态规划的常用优化【8】</td>
</tr>
</tbody></table>
<p><font color=Red>红色</font>是高频考点，<font color=YellowGreen>绿色</font>是基础考点</p>
]]></content>
      <categories>
        <category>算法</category>
        <category>刷题方法</category>
      </categories>
      <tags>
        <tag>算法刷题</tag>
        <tag>知识整理</tag>
      </tags>
  </entry>
  <entry>
    <title>动态规划</title>
    <url>/2024/12/02/%E7%AE%97%E6%B3%95%E6%A8%A1%E6%9D%BF/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/</url>
    <content><![CDATA[<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"># 自顶向下递归的动态规划</span><br><span class="line"><span class="function">def <span class="title">dp</span><span class="params">(状态<span class="number">1</span>, 状态<span class="number">2</span>, ...)</span>:</span></span><br><span class="line"><span class="function">    for 选择 in 所有可能的选择:</span></span><br><span class="line"><span class="function">        # 此时的状态已经因为做了选择而改变</span></span><br><span class="line"><span class="function">        result =</span> 求最值(result, <span class="built_in">dp</span>(状态<span class="number">1</span>, 状态<span class="number">2</span>, ...))</span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line"># 自底向上迭代的动态规划</span><br><span class="line"># 初始化 base <span class="keyword">case</span></span><br><span class="line">dp[<span class="number">0</span>][<span class="number">0</span>][...] = base <span class="keyword">case</span></span><br><span class="line"># 进行状态转移</span><br><span class="line"><span class="keyword">for</span> 状态<span class="number">1</span> in 状态<span class="number">1</span>的所有取值：</span><br><span class="line">    <span class="keyword">for</span> 状态<span class="number">2</span> in 状态<span class="number">2</span>的所有取值：</span><br><span class="line">        <span class="keyword">for</span> ...</span><br><span class="line">            dp[状态<span class="number">1</span>][状态<span class="number">2</span>][...] = 求最值(选择<span class="number">1</span>，选择<span class="number">2.</span>..)</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>数据结构</category>
      </categories>
      <tags>
        <tag>算法刷题</tag>
        <tag>算法模板</tag>
      </tags>
  </entry>
  <entry>
    <title>宽度优先遍历模版</title>
    <url>/2024/12/02/%E7%AE%97%E6%B3%95%E6%A8%A1%E6%9D%BF/%E5%AE%BD%E5%BA%A6%E4%BC%98%E5%85%88%E9%81%8D%E5%8E%86%E6%A8%A1%E7%89%88/</url>
    <content><![CDATA[<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">queue&lt;<span class="type">int</span>&gt; q;</span><br><span class="line">st[<span class="number">1</span>] = <span class="literal">true</span>; <span class="comment">// 表示1号点已经被遍历过</span></span><br><span class="line">q.<span class="built_in">push</span>(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (q.<span class="built_in">size</span>())</span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> t = q.<span class="built_in">front</span>();</span><br><span class="line">    q.<span class="built_in">pop</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = h[t]; i != <span class="number">-1</span>; i = ne[i])</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> j = e[i];</span><br><span class="line">        <span class="keyword">if</span> (!st[j])</span><br><span class="line">        &#123;</span><br><span class="line">            st[j] = <span class="literal">true</span>; <span class="comment">// 表示点j已经被遍历过</span></span><br><span class="line">            q.<span class="built_in">push</span>(j);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>算法刷题</tag>
        <tag>算法模板</tag>
      </tags>
  </entry>
  <entry>
    <title>并查集算法模板</title>
    <url>/2024/12/02/%E7%AE%97%E6%B3%95%E6%A8%A1%E6%9D%BF/%E5%B9%B6%E6%9F%A5%E9%9B%86%E7%AE%97%E6%B3%95%E6%A8%A1%E6%9D%BF/</url>
    <content><![CDATA[<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">(<span class="number">1</span>)朴素并查集：</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> p[N]; <span class="comment">//存储每个点的祖宗节点</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 返回x的祖宗节点</span></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">find</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (p[x] != x) p[x] = <span class="built_in">find</span>(p[x]);</span><br><span class="line">        <span class="keyword">return</span> p[x];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 初始化，假定节点编号是1~n</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i ++ ) p[i] = i;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 合并a和b所在的两个集合：</span></span><br><span class="line">    p[<span class="built_in">find</span>(a)] = <span class="built_in">find</span>(b);</span><br><span class="line"></span><br><span class="line">(<span class="number">2</span>)维护size的并查集：</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> p[N], size[N];</span><br><span class="line">    <span class="comment">//p[]存储每个点的祖宗节点, size[]只有祖宗节点的有意义，表示祖宗节点所在集合中的点的数量</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 返回x的祖宗节点</span></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">find</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (p[x] != x) p[x] = <span class="built_in">find</span>(p[x]);</span><br><span class="line">        <span class="keyword">return</span> p[x];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 初始化，假定节点编号是1~n</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i ++ )</span><br><span class="line">    &#123;</span><br><span class="line">        p[i] = i;</span><br><span class="line">        size[i] = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 合并a和b所在的两个集合：</span></span><br><span class="line">    size[<span class="built_in">find</span>(b)] += size[<span class="built_in">find</span>(a)];</span><br><span class="line">    p[<span class="built_in">find</span>(a)] = <span class="built_in">find</span>(b);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">(<span class="number">3</span>)维护到祖宗节点距离的并查集：</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> p[N], d[N];</span><br><span class="line">    <span class="comment">//p[]存储每个点的祖宗节点, d[x]存储x到p[x]的距离</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 返回x的祖宗节点</span></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">find</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (p[x] != x)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">int</span> u = <span class="built_in">find</span>(p[x]);</span><br><span class="line">            d[x] += d[p[x]];</span><br><span class="line">            p[x] = u;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> p[x];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 初始化，假定节点编号是1~n</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i ++ )</span><br><span class="line">    &#123;</span><br><span class="line">        p[i] = i;</span><br><span class="line">        d[i] = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 合并a和b所在的两个集合：</span></span><br><span class="line">    p[<span class="built_in">find</span>(a)] = <span class="built_in">find</span>(b);</span><br><span class="line">    d[<span class="built_in">find</span>(a)] = distance; <span class="comment">// 根据具体问题，初始化find(a)的偏移量</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>数据结构</category>
      </categories>
      <tags>
        <tag>算法刷题</tag>
        <tag>算法模板</tag>
      </tags>
  </entry>
  <entry>
    <title>快速排序算法模版</title>
    <url>/2024/12/02/%E7%AE%97%E6%B3%95%E6%A8%A1%E6%9D%BF/%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95%E6%A8%A1%E7%89%88/</url>
    <content><![CDATA[<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">quick_sort</span><span class="params">(<span class="type">int</span> q[], <span class="type">int</span> l, <span class="type">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (l &gt;= r) <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> i = l - <span class="number">1</span>, j = r + <span class="number">1</span>, x = q[l + r &gt;&gt; <span class="number">1</span>];</span><br><span class="line">    <span class="keyword">while</span> (i &lt; j)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">do</span> i ++ ; <span class="keyword">while</span> (q[i] &lt; x);</span><br><span class="line">        <span class="keyword">do</span> j -- ; <span class="keyword">while</span> (q[j] &gt; x);</span><br><span class="line">        <span class="keyword">if</span> (i &lt; j) <span class="built_in">swap</span>(q[i], q[j]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">quick_sort</span>(q, l, j), <span class="built_in">quick_sort</span>(q, j + <span class="number">1</span>, r);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>数据结构</category>
      </categories>
      <tags>
        <tag>算法刷题</tag>
        <tag>算法模板</tag>
      </tags>
  </entry>
  <entry>
    <title>栈算法模板</title>
    <url>/2024/12/02/%E7%AE%97%E6%B3%95%E6%A8%A1%E6%9D%BF/%E6%A0%88%E7%AE%97%E6%B3%95%E6%A8%A1%E6%9D%BF/</url>
    <content><![CDATA[<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// tt表示栈顶</span></span><br><span class="line"><span class="type">int</span> stk[N], tt = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 向栈顶插入一个数</span></span><br><span class="line">stk[ ++ tt] = x;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 从栈顶弹出一个数</span></span><br><span class="line">tt -- ;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 栈顶的值</span></span><br><span class="line">stk[tt];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 判断栈是否为空，如果 tt &gt; 0，则表示不为空</span></span><br><span class="line"><span class="keyword">if</span> (tt &gt; <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>算法刷题</tag>
        <tag>算法模板</tag>
      </tags>
  </entry>
  <entry>
    <title>朴素版prim算法</title>
    <url>/2024/12/02/%E7%AE%97%E6%B3%95%E6%A8%A1%E6%9D%BF/%E6%9C%B4%E7%B4%A0%E7%89%88prim%E7%AE%97%E6%B3%95/</url>
    <content><![CDATA[<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="type">int</span> n;      <span class="comment">// n表示点数</span></span><br><span class="line"><span class="type">int</span> g[N][N];        <span class="comment">// 邻接矩阵，存储所有边</span></span><br><span class="line"><span class="type">int</span> dist[N];        <span class="comment">// 存储其他点到当前最小生成树的距离</span></span><br><span class="line"><span class="type">bool</span> st[N];     <span class="comment">// 存储每个点是否已经在生成树中</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果图不连通，则返回INF(值是0x3f3f3f3f), 否则返回最小生成树的树边权重之和</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">prim</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(dist, <span class="number">0x3f</span>, <span class="keyword">sizeof</span> dist);</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> res = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i ++ )</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> t = <span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= n; j ++ )</span><br><span class="line">            <span class="keyword">if</span> (!st[j] &amp;&amp; (t == <span class="number">-1</span> || dist[t] &gt; dist[j]))</span><br><span class="line">                t = j;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (i &amp;&amp; dist[t] == INF) <span class="keyword">return</span> INF;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (i) res += dist[t];</span><br><span class="line">        st[t] = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= n; j ++ ) dist[j] = <span class="built_in">min</span>(dist[j], g[t][j]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>算法刷题</tag>
        <tag>算法模板</tag>
      </tags>
  </entry>
  <entry>
    <title>背包算法模版</title>
    <url>/2024/12/02/%E7%AE%97%E6%B3%95%E6%A8%A1%E6%9D%BF/%E8%83%8C%E5%8C%85%E7%AE%97%E6%B3%95%E6%A8%A1%E7%89%88/</url>
    <content><![CDATA[<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span>  nValue,nKind;</span><br><span class="line"></span><br><span class="line"><span class="comment">//0-1 背包，代价为 cost, 获得的价值为 weight </span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">ZeroOnePack</span><span class="params">(<span class="type">int</span> cost,<span class="type">int</span> weight)</span></span>&#123;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=nValue;i&gt;=cost;i−−) </span><br><span class="line">		dp[i]=<span class="built_in">max</span>(dp[i],dp[i−cost]+weight);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//完全背包，代价为 cost, 获得的价值为 weight </span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">CompletePack</span><span class="params">(<span class="type">int</span> cost,<span class="type">int</span> weight)</span></span>&#123;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=cost;i&lt;=nValue;i++)</span><br><span class="line">		dp[i]=<span class="built_in">max</span>(dp[i],dp[i−cost]+weight);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//多重背包  </span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">MultiplePack</span><span class="params">(<span class="type">int</span> cost,<span class="type">int</span> weight,<span class="type">int</span> amount)</span></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(cost*amount&gt;=nValue) <span class="built_in">CompletePack</span>(cost,weight); </span><br><span class="line">	<span class="keyword">else</span>&#123;</span><br><span class="line">		<span class="type">int</span> k=<span class="number">1</span>; </span><br><span class="line">		<span class="keyword">while</span>(k&lt;amount)&#123;</span><br><span class="line">			<span class="built_in">ZeroOnePack</span>(k*cost,k*weight); </span><br><span class="line">			amount−=k;  </span><br><span class="line">			k&lt;&lt;=<span class="number">1</span>;</span><br><span class="line">		&#125; </span><br><span class="line">		<span class="built_in">ZeroOnePack</span>(amount*cost,amount*weight);<span class="comment">//这个不要忘记了</span></span><br><span class="line">	&#125; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>算法</category>
        <category>数据结构</category>
      </categories>
      <tags>
        <tag>算法刷题</tag>
        <tag>算法模板</tag>
      </tags>
  </entry>
  <entry>
    <title>深度优先遍历模板</title>
    <url>/2024/12/03/%E7%AE%97%E6%B3%95%E6%A8%A1%E6%9D%BF/%E6%B7%B1%E5%BA%A6%E4%BC%98%E5%85%88%E9%81%8D%E5%8E%86%E6%A8%A1%E6%9D%BF/</url>
    <content><![CDATA[<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> u)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    st[u] = <span class="literal">true</span>; <span class="comment">// st[u] 表示点u已经被遍历过</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = h[u]; i != <span class="number">-1</span>; i = ne[i])</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> j = e[i];</span><br><span class="line">        <span class="keyword">if</span> (!st[j]) <span class="built_in">dfs</span>(j);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>算法刷题</tag>
        <tag>算法模板</tag>
      </tags>
  </entry>
  <entry>
    <title>链表算法模板</title>
    <url>/2024/12/02/%E7%AE%97%E6%B3%95%E6%A8%A1%E6%9D%BF/%E9%93%BE%E8%A1%A8%E7%AE%97%E6%B3%95%E6%A8%A1%E6%9D%BF/</url>
    <content><![CDATA[<p>单链表</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// head存储链表头，e[]存储节点的值，ne[]存储节点的next指针，idx表示当前用到了哪个节点</span></span><br><span class="line"><span class="type">int</span> head, e[N], ne[N], idx;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 初始化</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">init</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    head = <span class="number">-1</span>;</span><br><span class="line">    idx = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在链表头插入一个数a</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">insert</span><span class="params">(<span class="type">int</span> a)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    e[idx] = a, ne[idx] = head, head = idx ++ ;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 将头结点删除，需要保证头结点存在</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">remove</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    head = ne[head];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h2 id="双链表"><a href="#双链表" class="headerlink" title="双链表"></a>双链表</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// e[]表示节点的值，l[]表示节点的左指针，r[]表示节点的右指针，idx表示当前用到了哪个节点</span></span><br><span class="line"><span class="type">int</span> e[N], l[N], r[N], idx;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 初始化</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">init</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//0是左端点，1是右端点</span></span><br><span class="line">    r[<span class="number">0</span>] = <span class="number">1</span>, l[<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">    idx = <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在节点a的右边插入一个数x</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">insert</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    e[idx] = x;</span><br><span class="line">    l[idx] = a, r[idx] = r[a];</span><br><span class="line">    l[r[a]] = idx, r[a] = idx ++ ;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 删除节点a</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">remove</span><span class="params">(<span class="type">int</span> a)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    l[r[a]] = l[a];</span><br><span class="line">    r[l[a]] = r[a];</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>算法刷题</tag>
        <tag>算法模板</tag>
      </tags>
  </entry>
  <entry>
    <title>Bellman-Ford算法</title>
    <url>/2024/12/02/%E7%AE%97%E6%B3%95%E6%A8%A1%E6%9D%BF/%E6%9C%80%E7%9F%AD%E8%B7%AF/Bellman-Ford%E7%AE%97%E6%B3%95/</url>
    <content><![CDATA[<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> n, m;       <span class="comment">// n表示点数，m表示边数</span></span><br><span class="line"><span class="type">int</span> dist[N];        <span class="comment">// dist[x]存储1到x的最短路距离</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Edge</span>     <span class="comment">// 边，a表示出点，b表示入点，w表示边的权重</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> a, b, w;</span><br><span class="line">&#125;edges[M];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 求1到n的最短路距离，如果无法从1走到n，则返回-1。</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">bellman_ford</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(dist, <span class="number">0x3f</span>, <span class="keyword">sizeof</span> dist);</span><br><span class="line">    dist[<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 如果第n次迭代仍然会松弛三角不等式，就说明存在一条长度是n+1的最短路径，由抽屉原理，路径中至少存在两个相同的点，说明图中存在负权回路。</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i ++ )</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; m; j ++ )</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">int</span> a = edges[j].a, b = edges[j].b, w = edges[j].w;</span><br><span class="line">            <span class="keyword">if</span> (dist[b] &gt; dist[a] + w)</span><br><span class="line">                dist[b] = dist[a] + w;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (dist[n] &gt; <span class="number">0x3f3f3f3f</span> / <span class="number">2</span>) <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">return</span> dist[n];</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>算法刷题</tag>
        <tag>算法模板</tag>
      </tags>
  </entry>
  <entry>
    <title>FlatFormer读论文</title>
    <url>/2024/12/12/%E8%AF%BB%E8%AE%BA%E6%96%87/FlatFormer%E8%AF%BB%E8%AE%BA%E6%96%87/</url>
    <content><![CDATA[<h1 id="FlatFormer-Flattened-Window-Attention-for-Efficient-Point-Cloud-Transformer"><a href="#FlatFormer-Flattened-Window-Attention-for-Efficient-Point-Cloud-Transformer" class="headerlink" title="FlatFormer: Flattened Window Attention for Efficient Point Cloud Transformer"></a>FlatFormer: Flattened Window Attention for Efficient Point Cloud Transformer</h1><p><a href="https://openaccess.thecvf.com/content/CVPR2023/papers/Liu_FlatFormer_Flattened_Window_Attention_for_Efficient_Point_Cloud_Transformer_CVPR_2023_paper.pdf">论文链接</a>：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>读论文</category>
      </categories>
      <tags>
        <tag>读论文</tag>
        <tag>点云</tag>
      </tags>
  </entry>
  <entry>
    <title>Fast Dijkstra算法模板</title>
    <url>/2024/12/02/%E7%AE%97%E6%B3%95%E6%A8%A1%E6%9D%BF/%E6%9C%80%E7%9F%AD%E8%B7%AF/Fast%20Dijkstra%E7%AE%97%E6%B3%95%E6%A8%A1%E6%9D%BF/</url>
    <content><![CDATA[<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> fast_dijkstra &#123;  </span><br><span class="line">	<span class="type">const</span> <span class="type">int</span> maxn = <span class="number">210000</span>; </span><br><span class="line">	vector&lt;pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt;&gt; G[maxn]; </span><br><span class="line">	<span class="type">int</span> d[maxn];  </span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">dijkstra</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">using</span> node = pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt;;  </span><br><span class="line">		priority_queue&lt;node, vector&lt;node&gt;, greater&lt;node&gt;&gt; Q; </span><br><span class="line">		<span class="built_in">memset</span>(d, <span class="number">0x3f</span>, <span class="built_in">sizeof</span>(d));  </span><br><span class="line">		d[s] = <span class="number">0</span>;  </span><br><span class="line">		Q.<span class="built_in">emplace</span>(<span class="number">0</span>, s);  </span><br><span class="line">		<span class="keyword">while</span> (!Q.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">			<span class="keyword">auto</span> [dist, x] = Q.<span class="built_in">top</span>(); Q.<span class="built_in">pop</span>(); </span><br><span class="line">			<span class="keyword">if</span> (dist != d[x])</span><br><span class="line">				<span class="keyword">continue</span>;  </span><br><span class="line">			<span class="keyword">for</span> (<span class="keyword">auto</span> [y, w] : G[x]) &#123;</span><br><span class="line">				<span class="keyword">if</span> (d[y] &gt; d[x] + w) &#123; </span><br><span class="line">					d[y] = d[x] + w;</span><br><span class="line">	                Q.<span class="built_in">emplace</span>(d[y], y);</span><br><span class="line">					<span class="comment">//p[y] = x;</span></span><br><span class="line">				&#125; </span><br><span class="line">			&#125;</span><br><span class="line">		&#125; </span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;  </span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">&quot;%d %d %d&quot;</span>, &amp;n, &amp;m, &amp;s); </span><br><span class="line">		<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; m; ++i) &#123;</span><br><span class="line">			<span class="type">int</span> x, y, z;  </span><br><span class="line">			<span class="built_in">scanf</span>(<span class="string">&quot;%d %d %d&quot;</span>, &amp;x, &amp;y, &amp;z); </span><br><span class="line">			G[x].<span class="built_in">emplace_back</span>(y, z);</span><br><span class="line">		&#125;  </span><br><span class="line">		<span class="built_in">dijkstra</span>();  </span><br><span class="line">		<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, d[i] == <span class="number">0x3f3f3f3f</span> ? INT_MAX : d[i]); </span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">	&#125; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;  </span><br><span class="line">	<span class="comment">//freopen(&quot;in.txt&quot;, &quot;r&quot;, stdin); </span></span><br><span class="line">	fast_dijkstra::<span class="built_in">solve</span>();  </span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>算法刷题</tag>
        <tag>算法模板</tag>
      </tags>
  </entry>
  <entry>
    <title>队列模板</title>
    <url>/2024/12/02/%E7%AE%97%E6%B3%95%E6%A8%A1%E6%9D%BF/%E9%98%9F%E5%88%97%E6%A8%A1%E6%9D%BF/</url>
    <content><![CDATA[<h2 id="1-普通队列"><a href="#1-普通队列" class="headerlink" title="1. 普通队列:"></a>1. 普通队列:</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// hh 表示队头，tt表示队尾</span></span><br><span class="line"><span class="type">int</span> q[N], hh = <span class="number">0</span>, tt = <span class="number">-1</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 向队尾插入一个数</span></span><br><span class="line">q[ ++ tt] = x;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 从队头弹出一个数</span></span><br><span class="line">hh ++ ;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 队头的值</span></span><br><span class="line">q[hh];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 判断队列是否为空，如果 hh &lt;= tt，则表示不为空</span></span><br><span class="line"><span class="keyword">if</span> (hh &lt;= tt)</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>


<h2 id="2-循环队列"><a href="#2-循环队列" class="headerlink" title="2. 循环队列"></a>2. 循环队列</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// hh 表示队头，tt表示队尾的后一个位置</span></span><br><span class="line"><span class="type">int</span> q[N], hh = <span class="number">0</span>, tt = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 向队尾插入一个数</span></span><br><span class="line">q[tt ++ ] = x;</span><br><span class="line"><span class="keyword">if</span> (tt == N) tt = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 从队头弹出一个数</span></span><br><span class="line">hh ++ ;</span><br><span class="line"><span class="keyword">if</span> (hh == N) hh = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 队头的值</span></span><br><span class="line">q[hh];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 判断队列是否为空，如果hh != tt，则表示不为空</span></span><br><span class="line"><span class="keyword">if</span> (hh != tt)</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>数据结构</category>
      </categories>
      <tags>
        <tag>算法刷题</tag>
        <tag>算法模板</tag>
      </tags>
  </entry>
</search>
